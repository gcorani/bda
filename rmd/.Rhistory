import numpy as np
import pandas as pd
from scipy.stats import norm
from scipy.stats import halfnorm
import matplotlib.pyplot as plt
mu_len = 80
mu = np.linspace(145, 205, mu_len)
sigma = np.linspace(0, 100, 120)
post_density = np.zeros( ( len(mu),len(sigma) ) )
for row, current_mu in enumerate(mu):
for col, current_sigma in enumerate(sigma):
#prior: prior(current_mu) * density(current_sigma)
# we assume the priors p(mu) and p(sigma) to be independent
prior = norm.pdf(current_mu, loc=175, scale=5)
prior = prior * halfnorm.pdf(current_sigma, scale=35)
prior
current_mu
current_sigma
prior = norm.pdf(current_mu, loc=175, scale=5)
prior = prior * halfnorm.pdf(current_sigma, scale=35)
#assuming independence of the y_i, the lik terms multiply
lik   = norm.pdf(168, loc=current_mu, scale=current_sigma)
lik
post_density[row,col] = prior * lik
for row, current_mu in enumerate(mu):
for col, current_sigma in enumerate(sigma):
#prior: prior(current_mu) * density(current_sigma)
# we assume the priors p(mu) and p(sigma) to be independent
prior = norm.pdf(current_mu, loc=175, scale=5)
prior = prior * halfnorm.pdf(current_sigma, scale=35)
#assuming independence of the y_i, the lik terms multiply
lik   = norm.pdf(168, loc=current_mu, scale=current_sigma)
#lik   = lik * norm.pdf(178, loc=current_mu, scale=current_sigma)
#unnormalized density
post_density[row,col] = prior * lik
post_density
sigma[0]
sigma = np.linspace(0.01, 100, 120)
post_density = np.zeros( ( len(mu),len(sigma) ) )
for row, current_mu in enumerate(mu):
for col, current_sigma in enumerate(sigma):
#prior: prior(current_mu) * density(current_sigma)
# we assume the priors p(mu) and p(sigma) to be independent
prior = norm.pdf(current_mu, loc=175, scale=5)
prior = prior * halfnorm.pdf(current_sigma, scale=35)
#assuming independence of the y_i, the lik terms multiply
lik   = norm.pdf(168, loc=current_mu, scale=current_sigma)
#lik   = lik * norm.pdf(178, loc=current_mu, scale=current_sigma)
#unnormalized density
post_density[row,col] = prior * lik
post_density = post_density/np.nansum(post_density)
post_density = post_density/np.sum(post_density)
plt.figure(figsize=(10, 3))
plt.matshow(post_density)
plt.title("Joint")
plt.show()
plt.subplot(1, 2, 1)
post_mu = np.nansum(post_density, axis=1)
plt.plot(mu,post_mu)
plt.title("Post mean")
plt.show()
post_sigma = np.nansum(post_density, axis=0)
plt.subplot(1, 2, 2)
plt.plot(sigma,post_sigma)
plt.title("Post sigma")
plt.show()
post_sigma = np.sum(post_density, axis=0)
plt.subplot(1, 2, 2)
plt.plot(sigma,post_sigma)
plt.title("Post sigma")
plt.show()
mu_len = 80
mu = np.linspace(145, 205, mu_len)
#the sigma has a broad range (see slides: 75% pctile is 40; max is 128 and we use more points)
#the value of 0 is not feasible.
#we would better have a non-uniform grid
sigma = np.linspace(0.01, 100, 120)
post_density = np.zeros( ( len(mu),len(sigma) ) )
#we could vectorize the code. But here we aim at clarity.
for row, current_mu in enumerate(mu):
for col, current_sigma in enumerate(sigma):
#prior: prior(current_mu) * density(current_sigma)
# we assume the priors p(mu) and p(sigma) to be independent
prior = norm.pdf(current_mu, loc=175, scale=5)
prior = prior * halfnorm.pdf(current_sigma, scale=35)
#assuming independence of the y_i, the lik terms multiply
lik   = norm.pdf(168, loc=current_mu, scale=current_sigma)
lik   = lik * norm.pdf(178, loc=current_mu, scale=current_sigma)
#unnormalized density
post_density[row,col] = prior * lik
post_density = post_density/np.sum(post_density)
#for very small values of sigma, the posterior mean
#equals the  mean of the data.
#otherwise, it basically equals the prior mean since there is
#only a single observation.
plt.figure(figsize=(10, 3))
plt.matshow(post_density)
plt.title("Joint")
plt.show()
plt.subplot(1, 2, 1)
post_mu = np.nansum(post_density, axis=1)
plt.plot(mu,post_mu)
plt.title("Post mean")
#posterior marginal of sigma
post_sigma = np.sum(post_density, axis=0)
plt.subplot(1, 2, 2)
plt.plot(sigma,post_sigma)
plt.title("Post sigma")
plt.show()
plt.figure(figsize=(10, 3))
plt.matshow(post_density)
plt.title("Joint")
plt.show()
plt.figure(figsize=(10, 3))
plt.matshow(post_density[30:50,0:40])
plt.title("Joint")
plt.show()
plt.title("Joint")
plt.matshow(post_density[30:50,0:40])
plt.title("Joint")
plt.show()
plt.subplot(1, 2, 1)
post_mu = np.nansum(post_density, axis=1)
plt.plot(mu,post_mu)
plt.title("Post mean")
#posterior marginal of sigma
post_sigma = np.sum(post_density, axis=0)
plt.subplot(1, 2, 2)
plt.plot(sigma,post_sigma)
plt.title("Post sigma")
plt.show()
