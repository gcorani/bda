import arviz as az
import matplotlib.pyplot as plt
from scipy.stats import poisson
from scipy.stats import norm
import numpy as np
import pymc3 as pm
import pandas as pd
from scipy import stats
import seaborn as sns
az.style.use("arviz-darkgrid")
plt.style.use('seaborn-white')
import stan
poisson_recon_code = """
data {
real lambda1;
real lambda2;
real lambdaU;
}
parameters {
int S1;         // first bottom time series
int S2;         // second bottom time series
}
transformed parameters {
int Y = S1 + S2; // upper time series
}
model {
S1 ~ poisson(lambda1);
S2 ~ poisson(lambda2);
//target += normal_lpdf(eta | 0, 1);       // prior log-density
//target += normal_lpdf(y | theta, sigma); // log-likelihood
}
"""
poisson_recon_code = """
data {
real lambda1;
real lambda2;
real lambdaY;
}
parameters {
int S1;         // first bottom time series
int S2;         // second bottom time series
}
transformed parameters {
int Y = S1 + S2; // yearly time series
}
model {
S1 ~ poisson(lambda1);
S2 ~ poisson(lambda2);
Y  ~ poisson (ambdaY)
}
"""
posterior = stan.build(poisson_recon_code, data=reconc_data, random_seed=1)
reconc_data = {"lambda1": 2,
"lambda2": 4,
"lambdaY": 9
}
posterior = stan.build(poisson_recon_code, data=reconc_data, random_seed=1)
poisson_recon_code = """
data {
real lambda1;
real lambda2;
real lambdaY;
}
parameters {
int S1;         // first bottom time series
int S2;         // second bottom time series
}
transformed parameters {
int Y = S1 + S2; // yearly time series
}
model {
S1 ~ poisson(lambda1);
S2 ~ poisson(lambda2);
Y  ~ poisson (lambdaY);
}
"""
posterior = stan.build(poisson_recon_code, data=reconc_data, random_seed=1)
poisson_recon_code = """
data {
real lambda1;
real lambda2;
real lambdaY;
}
parameters {
int S1;         // first bottom time series
int S2;         // second bottom time series
}
transformed parameters {
real Y = S1 + S2; // yearly time series
}
model {
S1 ~ poisson(lambda1);
S2 ~ poisson(lambda2);
Y  ~ poisson (lambdaY);
}
"""
reconc_data = {"lambda1": 2,
"lambda2": 4,
"lambdaY": 9
}
posterior = stan.build(poisson_recon_code, data=reconc_data, random_seed=1)
library(reticulate)
use_condaenv("r-reticulate")
reticulate::repl_python()
library(reticulate)
use_condaenv("r-reticulate")
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
library(reticulate)
knitr::include_graphics("prior-support.png")
knit_with_parameters("~/switchdrive/teaching/BayesianProg/bda/rmd/3-betaBinomial/betaBinomial.Rmd")
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
s <- function (a,b){
tmp <- (a * b ) / (a+b)^2 * (a + b +1)
return(tmp)
}
s(1,)
s(1,1)
1/sqrt(12)
s <- function (a,b){
tmp <- (a * b ) / (a+b)^2 * (a + b +1)
return(sqrt(tmp))
}
s(1,1)
1/sqrt(12)
s(0.5,0.5)
s(2,2)
y <- gold
library(fpp2)
y <- gold
snaive(y)
autoplot(snaive(y))
autoplot(snaive(y, h=20))
autoplot(snaive(ausbeer, h=20))
autoplot(naive(goog, h=20))
autoplot(naive(goog, h=200))
autoplot(naive(goog, h=200)) + autolayer(meanf(goog,h=200))
autoplot(naive(goog, h=200)) + autolayer(meanf(goog,h=50))
autoplot(naive(goog, h=50)) + autolayer(meanf(goog,h=50))
autoplot(naive(goog, h=50), PI = FALSE) + autolayer(meanf(goog,h=50))
autoplot(naive(goog, h=50), PI = FALSE) + autolayer(meanf(goog,h=50), PI=FALSE)
autoplot(naive(goog, h=200), PI = FALSE) + autolayer(meanf(goog,h=200), PI=FALSE)
autoplot( fitted( naive(goog)))
autoplot( fitted( naive(goog))) + autolayer(goog)
autoplot(goog) + autolayer( fitted( naive(goog)))
autoplot(goog200) + autolayer( fitted( naive(goog200)))
autoplot(goog200, series = "data") + autolayer( fitted( naive(goog200)), series = "fitted")
res <- residuals(naive(goog200))
autoplot(res)
checkresiduals(naive(goog200))
beer <- window(ausbeer, start=1992)
fc <- snaive(beer)
autoplot(fc)
checkresiduals(fc)
autoplot(residuals(fc))
ggseasonplot(residuals(fc))
ggsubseriesplot(residuals(fc))
checkresiduals(fc)
autoplot(auscafe)
autoplot(snaive(auscafe))
autoplot(mean(auscafe))
autoplot(meanf(auscafe))
autoplot(naive(auscafe))
autoplot(rwf(auscafe, drift = TRUE))
e <- tsCV(goog200, naive, h=1)
mean(abs(e))
mean(abs(e), na.rm = TRUE)
e <- tsCV(goog200, naive, h=13)
mean(abs(e), na.rm = TRUE)
library(reticulate)
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
