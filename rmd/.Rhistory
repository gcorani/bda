from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_sigma = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(mu, prior_mean, prior_sigma)
plt.subplot(1, 3, 1)
plt.plot(mu, prior, label='mu = %s\n sigma = %s' % (prior_mean, prior_sigma))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
lik = norm.pdf (-0.7, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (1.2, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (4.5, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (-4,  loc = mu, scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
#posterior
y         = np.array([-0.7, 1.2, 4.5, -4])
y_bar     = np.mean(y)
n         = len(y)
w_prior   = sigma_lik**2 / (4 * prior_sigma + sigma_lik**2)
post_mean = prior_mean * w_prior + y_bar * (1 - w_prior)
#formatting
post_mean = "{:.2f}".format(post_mean)
post_var  = (prior_sigma**2 * sigma_lik**2)/(n * prior_sigma**2 + sigma_lik**2)
post_s    = np.sqrt(post_var)
#formatting
post_s = "{:.2f}".format(post_s)
posterior = stats.norm.pdf(mu, loc = post_mean, scale = post_var)
plt.subplot(1, 3, 3)
plt.plot(mu, posterior, label='mu = %s\n sigma = %s' % (post_mean, post_s))
plt.legend(fontsize=12)
plt.title('Posterior')
import numpy as np
import pandas as pd
import arviz as az
import scipy.stats as stats
from matplotlib import pyplot as plt
from scipy.stats import norm
from scipy.stats import halfnorm
import seaborn as sns
sns.set_theme()
plt.rcParams.update({
"text.usetex": True,
"font.family": "sans-serif",
"font.sans-serif": ["Helvetica"]})
az.style.use('arviz-darkgrid')
from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_sigma = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(mu, prior_mean, prior_sigma)
plt.subplot(1, 3, 1)
plt.plot(mu, prior, label='mu = %s\n sigma = %s' % (prior_mean, prior_sigma))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
lik = norm.pdf (-0.7, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (1.2, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (4.5, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (-4,  loc = mu, scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
#posterior
y         = np.array([-0.7, 1.2, 4.5, -4])
y_bar     = np.mean(y)
n         = len(y)
w_prior   = sigma_lik**2 / (4 * prior_sigma + sigma_lik**2)
post_mean = prior_mean * w_prior + y_bar * (1 - w_prior)
#formatting
post_mean = "{:.2f}".format(post_mean)
post_var  = (prior_sigma**2 * sigma_lik**2)/(n * prior_sigma**2 + sigma_lik**2)
post_s    = np.sqrt(post_var)
#formatting
post_s = "{:.2f}".format(post_s)
posterior = stats.norm.pdf(mu, loc = post_mean, scale = post_var)
plt.subplot(1, 3, 3)
plt.plot(mu, posterior, label='mu = %s\n sigma = %s' % (post_mean, post_s))
plt.legend(fontsize=12)
plt.title('Posterior')
from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_sigma = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(mu, prior_mean, prior_sigma)
plt.subplot(1, 3, 1)
plt.plot(mu, prior, label='mu = %s\n sigma = %s' % (prior_mean, prior_sigma))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
y   = np.array([-0.7, 1.2, 4.5, -4])
#code below could be  vectorized
lik = norm.pdf (y[0], loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (y[1], loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (y[2], loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (y[3],  loc = mu, scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
posterior
y         = np.array([-0.7, 1.2, 4.5, -4])
y_bar     = np.mean(y)
n         = len(y)
w_prior   = sigma_lik**2 / (4 * prior_sigma + sigma_lik**2)
post_mean = prior_mean * w_prior + y_bar * (1 - w_prior)
formatting
post_mean = "{:.2f}".format(post_mean)
post_var  = (prior_sigma**2 * sigma_lik**2)/(n * prior_sigma**2 + sigma_lik**2)
post_s    = np.sqrt(post_var)
#formatting
#post_s = "{:.2f}".format(post_s)
posterior = stats.norm.pdf(mu, loc = post_mean, scale = post_var)
plt.subplot(1, 3, 3)
plt.plot(mu, posterior, label='mu = %s\n sigma = %s' % (post_mean, post_s))
plt.legend(fontsize=12)
plt.title('Posterior')
