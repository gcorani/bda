plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
mu = 7.2
sigma = 2.6
y = stats.norm.pdf(x, a, b)
plt.plot(x, y, label='normal (%s, %s)' % (mu, sigma))
plt.legend(fontsize=12)
import numpy as np
import pandas as pd
import arviz as az
import scipy.stats as stats
from matplotlib import pyplot as plt
from scipy.stats import norm
from scipy.stats import halfnorm
import seaborn as sns
sns.set_theme()
plt.rcParams.update({
"text.usetex": True,
"font.family": "sans-serif",
"font.sans-serif": ["Helvetica"]})
az.style.use('arviz-darkgrid')
plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
mu = 7.2
sigma = 2.6
y = stats.norm.pdf(x, a, b)
plt.plot(x, y, label='normal (%s, %s)' % (mu, sigma))
plt.legend(fontsize=12)
plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
mu = 7.2
sigma = 2.6
y = stats.norm.pdf(x, loc = mu, scale = sigma)
plt.plot(x, y, label='normal (%s, %s)' % (mu, sigma))
plt.legend(fontsize=12)
plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
mu = 7.2
sigma = 2.6
y = stats.norm.pdf(x, loc = mu, scale = sigma)
plt.plot(x, y, label='normal (%s, %s)' % (mu, sigma))
plt.legend(fontsize=12)
7.2+3*2.6
plt.figure(figsize=(10, 3))
x = np.linspace(-1, 15, 100)
mu = 7.2
sigma = 2.6
y = stats.norm.pdf(x, loc = mu, scale = sigma)
plt.plot(x, y, label='normal (%s, %s)' % (mu, sigma))
plt.legend(fontsize=12)
mu = 7.2
sigma = 2.6
p1 = 1 - stats.norm.cdf(7.6, loc = mu, scale = sigma)
p2 = 1 - stats.norm.cdf(4, loc = mu, scale = sigma)
p1
p2
mu = 7.2
sigma = 2.6
p1 = 1 - stats.norm.cdf(7.6, loc = mu, scale = sigma)
p2 = 1 - stats.norm.cdf(4, loc = mu, scale = sigma)
p3 = stats.norm.cdf(0, loc = mu, scale = sigma)
p1
p2
p3
mu = 7.2
sigma = 2.6
p1 = 1 - stats.norm.cdf(7.6, loc = mu, scale = sigma)
p2 = 1 - stats.norm.cdf(4, loc = mu, scale = sigma)
p3 = stats.norm.cdf(0, loc = mu, scale = sigma)
p4 = 1 - stats.norm.cdf(8, loc = mu, scale = sigma)
p1
p2
p3
p4
from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_s = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(x, prior_mean, prior_s)
plt.subplot(1, 3, 1)
plt.plot(x, y, label='mu = %s\n sigma = %s' % (prior_mean, prior_s))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
lik = norm.pdf (-0.7, loc = mu , scale = sigma_lik)
lik = lik * norm.pdf (1.2, loc = mu , scale = sigma_lik)
lik = lik * norm.pdf (4.5, loc = mu , scale = sigma_lik)
lik = lik * norm.pdf (-4,  loc = mu , scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
#posterior
y_bar = np.mean(-0.7, 1.2, 4.5, -4)
mu_post =
sigma_post=40
#posterior = stats.beta.pdf(x, a_post, b_post)
plt.subplot(1, 3, 3)
#plt.plot(theta, posterior, label='Posterior: a = %s\nb = %s' % (a, b))
#plt.legend(fontsize=12)
from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_s = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(x, prior_mean, prior_s)
plt.subplot(1, 3, 1)
plt.plot(x, y, label='mu = %s\n sigma = %s' % (prior_mean, prior_s))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
lik = norm.pdf (-0.7, loc = mu , scale = sigma_lik)
lik = lik * norm.pdf (1.2, loc = mu , scale = sigma_lik)
lik = lik * norm.pdf (4.5, loc = mu , scale = sigma_lik)
lik = lik * norm.pdf (-4,  loc = mu , scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
#posterior
y_bar = np.mean([-0.7, 1.2, 4.5, -4])
mu_post =
sigma_post=40
#posterior = stats.beta.pdf(x, a_post, b_post)
plt.subplot(1, 3, 3)
#plt.plot(theta, posterior, label='Posterior: a = %s\nb = %s' % (a, b))
#plt.legend(fontsize=12)
from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_sigma = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(x, prior_mean, prior_sigma)
plt.subplot(1, 3, 1)
plt.plot(x, y, label='mu = %s\n sigma = %s' % (prior_mean, prior_sigma))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
lik = norm.pdf (-0.7, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (1.2, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (4.5, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (-4,  loc = mu, scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
#posterior
y_bar     = np.mean([-0.7, 1.2, 4.5, -4])
w_prior   = sigma_lik**2 / (4 * prior_sigma + sigma_lik**2)
post_mean =  prior_mean * w_prior + y_bar * (1 - w_prior)
post_var  = (prior_sigma**2 * sigma_lik**@2)/(n * prior_sigma**2 + sigma_lik**@2)
post_s    = np.sqrt(post_var)
posterior = stats.norm.pdf(mu, loc = post_mean, scale = post_var)
plt.subplot(1, 3, 3)
#plt.plot(theta, posterior, label='Posterior: a = %s\nb = %s' % (a, b))
#plt.legend(fontsize=12)
from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_sigma = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(x, prior_mean, prior_sigma)
plt.subplot(1, 3, 1)
plt.plot(x, y, label='mu = %s\n sigma = %s' % (prior_mean, prior_sigma))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
lik = norm.pdf (-0.7, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (1.2, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (4.5, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (-4,  loc = mu, scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
#posterior
y_bar     = np.mean([-0.7, 1.2, 4.5, -4])
w_prior   = sigma_lik**2 / (4 * prior_sigma + sigma_lik**2)
post_mean =  prior_mean * w_prior + y_bar * (1 - w_prior)
post_var  = (prior_sigma**2 * sigma_lik**@2)/(n * prior_sigma**2 + sigma_lik**@2)
post_s    = np.sqrt(post_var)
posterior = stats.norm.pdf(mu, loc = post_mean, scale = post_var)
plt.subplot(1, 3, 3)
#plt.plot(theta, posterior, label='Posterior: a = %s\nb = %s' % (a, b))
#plt.legend(fontsize=12)
from scipy.stats import norm
plt.figure(figsize=(10, 3))
mu = np.linspace(-6, 21, 100)
prior_mean = 7.2
prior_sigma = 2.6
sigma_lik = 2
#prior
prior = stats.norm.pdf(x, prior_mean, prior_sigma)
plt.subplot(1, 3, 1)
plt.plot(x, y, label='mu = %s\n sigma = %s' % (prior_mean, prior_sigma))
plt.title('Prior')
plt.legend(fontsize=12)
#likelihood
lik = norm.pdf (-0.7, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (1.2, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (4.5, loc = mu, scale = sigma_lik)
lik = lik * norm.pdf (-4,  loc = mu, scale = sigma_lik)
plt.subplot(1, 3, 2)
plt.plot(mu, lik)
plt.title('Likelihood')
#posterior
y_bar     = np.mean([-0.7, 1.2, 4.5, -4])
w_prior   = sigma_lik**2 / (4 * prior_sigma + sigma_lik**2)
post_mean =  prior_mean * w_prior + y_bar * (1 - w_prior)
post_var  = (prior_sigma**2 * sigma_lik**@2)/(n * prior_sigma**2 + sigma_lik**@2)
post_s    = np.sqrt(post_var)
posterior = stats.norm.pdf(mu, loc = post_mean, scale = post_var)
plt.subplot(1, 3, 3)
plt.plot(mu, posterior, label='mean = %s\n sigma = %s' % (post_mean, post_s))
plt.legend(fontsize=12)
plt.title('Posterior')
