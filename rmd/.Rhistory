plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
for ind, (a, b) in enumerate([(1, 1)]):
y = stats.beta.pdf(x, a, b)
#plt.subplot(1, 3, ind+1)
plt.plot(x, y, label='a = %s\nb = %s' % (a, b))
plt.legend(fontsize=12)
quit
import numpy as np
import pandas as pd
import arviz as az
import scipy.stats as stats
from matplotlib import pyplot as plt
import seaborn as sns
sns.set_theme()
plt.rcParams.update({
"text.usetex": True,
"font.family": "sans-serif",
"font.sans-serif": ["Helvetica"]})
az.style.use('arviz-darkgrid')
plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
for ind, (a, b) in enumerate([(1, 1)]):
y = stats.beta.pdf(x, a, b)
#plt.subplot(1, 3, ind+1)
plt.plot(x, y, label='a = %s\nb = %s' % (a, b))
plt.legend(fontsize=12)
plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
for ind, (a, b) in enumerate([(1, 1)]):
y = stats.beta.pdf(x, a, b)
#plt.subplot(1, 3, ind+1)
plt.plot(x, y, label='a = %s\nb = %s' % (a, b))
plt.legend(fontsize=12)
plt.figure(figsize=(10, 3))
x = np.linspace(0, 1, 100)
for ind, (a, b) in enumerate([(1, 1)]):
y = stats.beta.pdf(x, a, b)
#plt.subplot(1, 3, ind+1)
plt.plot(x, y, label='a = %s\nb = %s' % (a, b))
plt.legend(fontsize=12)
plt.ylabel('p ($\theta$)')
import numpy as np
import pandas as pd
import arviz as az
import scipy.stats as stats
from matplotlib import pyplot as plt
import seaborn as sns
sns.set_theme()
plt.rcParams.update({
"text.usetex": True,
"font.family": "sans-serif",
"font.sans-serif": ["Helvetica"]})
az.style.use('arviz-darkgrid')
reticulate::repl_python()
library(reticulate)
quit
use_condaenv("r-reticulate")
reticulate::repl_python()
source("~/switchdrive/devel/etsKernel/varianceETS.R")
pop <- seq(1,7)
pop
start <- sample.int(7,1)
start
runif()
runif(1)
i<-2
proposal <- max(visited[i-1]-1,1)
visited <- vector (length = simul)
start <- sample.int(7,1)
visited[1] <- start
pop     <- seq(1,7)
simul   <- 10000
visited <- vector (length = simul)
start <- sample.int(7,1)
visited[1] <- start
proposal <- max(visited[i-1]-1,1)
proposal
visited[1]
if (runif() < 0.5){
proposal <- min(visited[i-1]+1,7)
}
if (runif(1) < 0.5){
proposal <- min(visited[i-1]+1,7)
}
proposal
visited[1]
pop     <- seq(1,7)
simul   <- 10000
visited <- vector (length = simul)
start <- sample.int(7,1)
visited[1] <- start
for (i in 2:simul){
proposal <- max(visited[i-1]-1,1)
if (runif(1) < 0.5){
proposal <- min(visited[i-1]+1,7)
}
if (proposal > visited[i-1]){
visited[i] <- proposal
}
else {
threshold <- proposal / visited[i-1]
if (runif(1) < threshold){
visited[i] <- proposal
}
else{
visited[i] <- visited[i-1]
}
}
}
visited
p <- pop/sum(p)
pop     <- seq(1,7)
p <- pop/sum(pop)
p
mean(visited==1)
mean(visited==2)
mean(visited==4)
mean(visited==3)
mean(visited==4)
mean(visited==5)
library(reticulate)
use_condaenv("r-reticulate")
include_graphics(fig71)
library(reticulate)
library(png)
use_condaenv("r-reticulate")
include_graphics(fig71.png)
# Random walk
* The samples from the posterior are generated by taking a *random walk*
* The walk starts from a randomly chosen point where the distribution is non zero.
* At each time step we propose the move to a new position $\theta_{\text{proposed}}$.
* We then decide whether or not to accept the proposed move.
* The move is accepted with probability
$$ p_{\text{move}} = min \left(  \frac {p(\theta_{\text{proposed}})} {p(\theta_{\text{current}})}, 1 \right) $$
#  Metropolis algorithm applied to Bernoulli likelihood and beta prior
$p(\theta \mid D) \propto p(D \mid \theta) p(theta) = \theta^{a+y} (1-\theta)^{b+n-y}$
