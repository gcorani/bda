def next_position(current,proposal):
next_vis = current
if proposal>current:
next_vis = proposal
else:
if np.random.uniform()< (proposal/current):
next_vis = proposal
return (next_vis)
import numpy as np
import pandas as pd
pop = range(1,8)
start = 3
samples = 50000
position = np.ones([samples,1])
position[0] = start
for i in range(1,samples):
# proposal = right
proposal = min(position[i-1]+1,7)
if  np.random.uniform()<0.5:
# proposal = left
proposal = max(position[i-1]-1,1)
position[i] = next_position(position[i-1],proposal)
df = pd.DataFrame(position, columns=["position"])
a = pd.crosstab(index=df['position'],columns=df['position'], margins=True)["All"]
freqs = a[0:7]
empirical_p = freqs / sum(freqs)
true_p = range(1,8)/np.sum(range(1,8))
empirical_p
true_p
np.sum(abd(empirical_p - true_p))
np.sum(np.abs(empirical_p - true_p))
def next_position(current,proposal):
next_vis = current
if proposal>current:
next_vis = proposal
else:
if np.random.uniform()< (proposal/current):
next_vis = proposal
return (next_vis)
pop = range(1,8)
start = 3
samples = 50000
position = np.ones([samples,1])
position[0] = start
for i in range(1,samples):
# proposal = right
proposal = min(position[i-1]+1,7)
if  np.random.uniform()<0.2: #debug
# proposal = left
proposal = max(position[i-1]-1,1)
position[i] = next_position(position[i-1],proposal)
df = pd.DataFrame(position, columns=["position"])
#contingency table
a = pd.crosstab(index=df['position'],columns=df['position'], margins=True)["All"]
freqs = a[0:7]
empirical_p = freqs / sum(freqs)
true_p = range(1,8)/np.sum(range(1,8))
np.sum(np.abs(empirical_p - true_p))
